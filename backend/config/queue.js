const { Queue, Worker, QueueScheduler, QueueEvents } = require('bullmq');
const IORedis = require('ioredis');
const sequelize = require('../config/db'); // Connexion √† la base de donn√©es
const { getIO } = require("../config/socket"); // WebSocket pour mises √† jour en temps r√©el
const BidController = require('../controllers/BidController');
const Bid = require("../models/Bid");
const Auction = require("../models/Auction");
const Article = require("../models/Article");
const connection = new IORedis({
  host: '127.0.0.1',
  port: 6379,
  maxRetriesPerRequest: null,
  enableReadyCheck: false,
});

// ‚úÖ Cr√©er la file d'attente des ench√®res
const bidQueue = new Queue('bidQueue', { connection });
const bidQueueEvents = new QueueEvents('bidQueue', { connection });

// ‚úÖ √âcouter les √©v√©nements de la queue
bidQueueEvents.on('completed', (job) => {
  console.log(`‚úÖ Job termin√© : ${job.jobId}`);
});

bidQueueEvents.on('failed', (job, err) => {
  console.error(`‚ùå Job √©chou√© : ${job.jobId}`, err);
});

// ‚úÖ Worker pour traiter les ench√®res
const bidWorker = new Worker(
  'bidQueue',
  async (job) => {
    try {
      console.log(`üìå Job re√ßu: Nom = ${job.name}, ID = ${job.id}, Donn√©es:`, job.data);

      // ‚úÖ V√©rifier si `auctionId`, `userId`, `bidAmount` sont bien pr√©sents
      if (!job.data.auctionId || !job.data.userId || (job.name === 'manual-bid' && !job.data.bidAmount)) {
        console.error(`‚ùå Donn√©es invalides re√ßues pour job ID=${job.id}:`, job.data);
        throw new Error("‚ùå Donn√©es invalides: Auction ID, User ID ou montant d'ench√®re manquant !");
      }

      const { auctionId, bidAmount, userId, maxBidAmount } = job.data;

      console.log(`üîç Traitement du job ID=${job.id} pour Auction ID=${auctionId}, User ID=${userId}`);

      // ‚úÖ Gestion avec transaction
      const t = await sequelize.transaction();
      try {
        let result;

        if (job.name === 'manual-bid') {
          result = await BidController.processBid({ auctionId, bidAmount, userId, isAutoBid: false, transaction: t });
        } else if (job.name === 'auto-bid') {
          result = await BidController.processAutoBid({ auctionId, maxBidAmount, userId, transaction: t });
        }

        await t.commit(); // ‚úÖ Confirmer la transaction
        console.log(`‚úÖ Job ${job.name} (ID: ${job.id}) ex√©cut√© avec succ√®s.`);

      } catch (error) {
        await t.rollback(); // ‚ùå Annuler la transaction
        console.error(`‚ùå Erreur dans la transaction pour job ${job.id}:`, error);
        throw error;
      }

    } catch (error) {
      console.error(`‚ùå Erreur lors du traitement du job ${job.name} ID=${job.id}:`, error);
      throw error;
    }
  },
  { 
    connection,
    concurrency: 10 // üî• Permet de traiter plusieurs ench√®res en parall√®le
  }
);


// ‚úÖ G√©rer les erreurs du Worker
bidWorker.on('failed', (job, err) => {
  console.error(`‚ùå Erreur lors du traitement du job ${job.name}:`, err);
});

module.exports = { bidQueue, bidQueueEvents };
