const Auction = require('../models/Auction');
const Bid = require('../models/Bid');
const Article = require('../models/Article');
const User = require('../models/User');
const notificationController = require('./notificationController');
const Notification = require('../models/Notifications');
const GTCTransaction = require('../models/GTCTransaction'); // Import du mod√®le GTCTransaction
const ConversionRate = require('../models/ConversionRate'); // Import du mod√®le ConversionRate
const Platform = require('../models/Platform'); // Import du mod√®le Platform
const Category = require ('../models/Category');
const sequelize = require('../config/db'); // ‚úÖ Import de Sequelize
const Delivery = require ('../models/Delivery')
const AutoBid = require("../models/autobid"); // üî• Ajout n√©cessaire

// Envoyer via WebSocket
const { getIO } = require('../config/socket'); 
const { Op } = require('sequelize');


exports.createAuction = async (req, res) => {
  let transaction;

  try {
    transaction = await sequelize.transaction(); // ‚úÖ D√©marrer une transaction Sequelize

    const { articleId, endDate } = req.body;
    const sellerId = req.user.id;

    // ‚úÖ R√©cup√©rer les frais d'ench√®re d√©finis par l'administrateur
    const platform = await Platform.findOne({ transaction });

    if (!platform || !platform.auctionFee) {
      return res.status(500).json({ message: "Les frais d'ench√®re ne sont pas d√©finis." });
    }

    const auctionFee = platform.auctionFee;

    // ‚úÖ V√©rification de l'article
    const article = await Article.findByPk(articleId, {
      include: [{ model: User, as: 'seller', attributes: ['id', 'name', 'tokenBalance'] }],
      transaction,
    });

    if (!article) return res.status(404).json({ message: "Article non trouv√©." });
    if (!article.isApproved) return res.status(400).json({ message: "L'article doit √™tre approuv√© avant d'√™tre mis en ench√®re." });
    if (article.isAuctioned) return res.status(400).json({ message: "Cet article est d√©j√† en ench√®re." });

    const seller = article.seller;
    if (!seller) return res.status(404).json({ message: "Vendeur introuvable." });

    // üîç V√©rifier si le vendeur a assez de fonds
    if (seller.tokenBalance < auctionFee) {
      return res.status(400).json({ message: `Vous devez avoir au moins ${auctionFee} GTC pour mettre en ench√®re.` });
    }

    // ‚úÖ D√©duire les frais de mise en ench√®re
    seller.tokenBalance -= auctionFee;
    await seller.save({ transaction });

    // ‚úÖ Ajouter les frais au solde de la plateforme
    platform.balance += auctionFee;
    await platform.save({ transaction });

    // ‚úÖ Enregistrer la transaction GTC
    await GTCTransaction.create({
      userId: sellerId,
      type: 'fee',
      amount: auctionFee,
      description: `Frais de mise en ench√®re pour "${article.name}".`,
      isInternal: true,
      success: true,
      status: "completed",
    }, { transaction });

    // ‚úÖ Cr√©ation de l'ench√®re
    const auction = await Auction.create({
      articleId,
      startPrice: article.price,
      currentHighestBid: article.price,
      endDate: endDate || article.endDate,
      status: 'open',
    }, { transaction });

    article.isAuctioned = true;
    await article.save({ transaction });

    await transaction.commit(); // ‚úÖ Valider la transaction

    // ‚úÖ Enregistrer une notification pour le vendeur
    await Notification.create({
      userId: sellerId,
      message: `Votre article "${article.name}" a √©t√© mis en ench√®re avec succ√®s. ${auctionFee} GTC ont √©t√© d√©bit√©s.`,
    });

    // ‚úÖ WebSocket - Notifier en temps r√©el
    const io = getIO();
    io.emit("article-updated", { 
      id: article.id, 
      isAuctioned: true, 
      isApproved: true,
      seller: article.seller
    });

    io.emit("new-notification", {
      userId: sellerId,
      message: `Votre article "${article.name}" a √©t√© mis en ench√®re.`,
    });

    res.status(201).json({ message: `L'ench√®re a √©t√© cr√©√©e avec succ√®s. ${auctionFee} GTC ont √©t√© d√©bit√©s.` });

  } catch (error) {
    if (transaction) await transaction.rollback(); // ‚úÖ Annuler en cas d'erreur
    console.error("Erreur lors de la mise en ench√®re :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};



exports.placeBid = async (req, res) => {
  try {
    const { auctionId, bidAmount } = req.body;
    const userId = req.user.id;

    const auction = await Auction.findByPk(auctionId);

    if (!auction || auction.status !== 'open') {
      return res.status(400).json({ message: "Ench√®re non disponible." });
    }

    
    if (bidAmount <= auction.currentHighestBid) {
      return res.status(400).json({ message: "Le montant doit √™tre sup√©rieur √† l'offre actuelle." });
    }

    const bid = await Bid.create({
      auctionId,
      userId,
      amount: bidAmount,
      bidTime: new Date(),
    });
    


    auction.currentHighestBid = bidAmount;
    auction.highestBidUserId = userId;
    await auction.save();

    res.status(200).json({ message: "Ench√®re plac√©e avec succ√®s.", bid, auction });
  } catch (error) {
    console.error("Erreur lors de la mise √† jour de l'ench√®re :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};


// R√©cup√©rer les ench√®res actives pour les vendeurs et les administrateurs
exports.getActiveAuctions = async (req, res) => {
  try {
    const { id: userId, isAdmin } = req.user;

    const filter = isAdmin
      ? { status: 'open' }
      : { status: 'open', '$articleDetails.sellerId$': userId };

    const auctions = await Auction.findAll({
      where: { status: 'open' },
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['name', 'categoryId', 'price', 'endDate', 'sellerId'],
          include: [
            { model: Category, 
              as: 'category', 
              attributes: ['id', 'name'], 
              required: false 
            },
            { model: User, 
              as: 'seller',
               attributes: ['id', 'name']
           },
          ],
        },
        { model: User, 
          as: 'highestBidder',
           attributes: ['id', 'name', 'email'] 
        },
        {
          model: Bid,
          as: 'bids',
          include: [{ model: User,
             as: 'bidder',
              attributes: ['id', 'name', 'email'] 
            }],
          order: [['amount', 'DESC']],
          limit: 5,
        },
      ],
    });

    // ‚úÖ Utilisation de Promise.all pour r√©cup√©rer les ench√©risseurs manquants
    const transformedAuctions = await Promise.all(
      auctions.map(async (auction) => {
        const sortedBids = auction.bids.sort((a, b) => b.amount - a.amount);

        let highestBidder = auction.highestBidder
          ? {
              id: auction.highestBidder.id,
              name: auction.highestBidder.name,
              email: auction.highestBidder.email,
            }
          : null;

        if (!highestBidder && auction.highestBidUserId) {
          highestBidder = await User.findByPk(auction.highestBidUserId, {
            attributes: ['id', 'name', 'email'],
          });
        }

        return {
          id: auction.id,
          status: auction.status,
          currentHighestBid: auction.currentHighestBid || 0,
          endDate: auction.endDate,
          articleDetails: {
            name: auction.articleDetails.name,
            category: auction.articleDetails.category
              ? auction.articleDetails.category.name
              : 'Cat√©gorie non disponible',
            price: auction.articleDetails.price,
            endDate: auction.articleDetails.endDate,
            sellerId: auction.articleDetails.sellerId,
            seller: auction.articleDetails.seller // ‚úÖ Ajout du vendeur ici
          },
          highestBidder: highestBidder
            ? {
                id: highestBidder.id,
                name: highestBidder.name,
                email: highestBidder.email,
              }
            : sortedBids.length > 0
            ? {
                id: sortedBids[0].bidder.id,
                name: sortedBids[0].bidder.name,
                email: sortedBids[0].bidder.email,
                bidAmount: sortedBids[0].amount,
              }
            : null,
          totalBids: auction.bids.length,
          bids: auction.bids.map((bid) => ({
            id: bid.id,
            amount: bid.amount,
            bidder: {
              id: bid.bidder.id,
              name: bid.bidder.name,
            },
          })),
        };
      })
    );

    res.status(200).json(transformedAuctions);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des ench√®res actives :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};




// Arr√™ter une ench√®re manuellement
exports.stopAuction = async (req, res) => {
  try {
    const { auctionId } = req.params;

    // Charger l'ench√®re avec les infos du vendeur et de l'article
    const auction = await Auction.findByPk(auctionId, {
      include: [
        {
          model: Article,
          as: 'articleDetails',
          include: [{ model: User, as: 'seller', attributes: ['id', 'name', 'email', 'tokenBalance', 'escrowBalance'] }],
        },
        { model: Bid, as: 'bids' },
      ],
    });

    if (!auction || auction.status !== 'open') {
      return res.status(400).json({ message: "Ench√®re non disponible ou d√©j√† ferm√©e." });
    }

    // Fermer l'ench√®re
    auction.status = 'closed';
    auction.finalizedAt = new Date();
    await auction.save();

    const seller = auction.articleDetails.seller;
    const article = auction.articleDetails;

    if (!seller) {
      return res.status(400).json({ message: "Vendeur introuvable pour cette ench√®re." });
    }

    await Notification.create({
      userId: seller.id,
      message: `Votre ench√®re pour l'article "${article.name}" a √©t√© arr√™t√©e.`,
    });

    let winner = null;

    // G√©rer le gagnant
    if (auction.highestBidUserId) {
      winner = await User.findByPk(auction.highestBidUserId);

      if (winner) {
        article.isSold = true;
        article.soldTo = winner.id;
        article.price = auction.currentHighestBid;
        await article.save();

        const commissionRate = 0.1;
        const commission = auction.currentHighestBid * commissionRate;
        const reward = auction.currentHighestBid - commission;

        // V√©rifier que le gagnant a assez de tokens
        if (winner.tokenBalance < auction.currentHighestBid) {
          return res.status(400).json({ message: "Solde insuffisant pour payer l'ench√®re." });
        }

        await winner.save();

        // Bloquer les fonds en escrow pour l'acheteur
        await GTCTransaction.create({
          userId: winner.id,
          auctionId: auction.id,
          type: "escrow",
          amount: reward,
          description: `Fonds bloqu√©s pour l'achat de "${article.name}"`,
          status: "pending",
          isInternal: true,
          success: true,
        });

        // Bloquer les fonds en escrow pour le vendeur
        await GTCTransaction.create({
          userId: seller.id,
          auctionId: auction.id,
          type: "escrow",
          amount: reward,
          description: `Fonds bloqu√©s pour la vente de "${article.name}"`,
          status: "pending",
          isInternal: true,
          success: true,
        });

        // Enregistrer la transaction de commission
        await GTCTransaction.create({
          userId: null,
          auctionId: auction.id,
          type: "commission",
          amount: commission,
          description: `Commission de la vente de "${article.name}".`,
          status: "completed",
          isInternal: true,
          success: true,
        });

        // Cr√©er une entr√©e de livraison
        const delivery = await Delivery.create({
          auctionId: auction.id,
          buyerId: winner.id,
          sellerId: seller.id,
          status: "pending",
          address: winner.address,
          codeUnique: Math.random().toString(36).substr(2, 8),
        });

        // ‚úÖ Notifier l'acheteur de son code unique
      await Notification.create({
        userId: winner.id,
        message: `Votre code unique pour la r√©ception de "${article.name}" est : ${delivery.codeUnique}. Gardez-le pr√©cieusement.`,
      });

        console.log(`[INFO] üîí ${reward} GTC bloqu√©s en Escrow Wallet pour ${winner.name}.`);
      }
    }

    const io = getIO();
    io.emit("auction-stopped", { id: auction.id });

    console.log(`üõë Ench√®re arr√™t√©e et mise √† jour en temps r√©el : ${auction.id}`);

    res.status(200).json({ message: "Ench√®re arr√™t√©e avec succ√®s.", auction });
  } catch (error) {
    console.error("Erreur lors de l'arr√™t de l'ench√®re :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};



exports.cancelAuction = async (req, res) => {
  try {
    const { auctionId } = req.params;
    const { reason } = req.body;

    console.log(`üîç Debug: Annulation de l'ench√®re ${auctionId}`);

    // ‚úÖ R√©cup√©ration de l'ench√®re avec toutes ses ench√®res associ√©es
    const auction = await Auction.findByPk(auctionId, {
      include: [
        {
          model: Bid,
          as: 'bids',
          attributes: ['id', 'userId', 'amount', 'isAutoBid', 'createdAt', 'refunded'],
          order: [['createdAt', 'DESC']], // üî• Trier par date d√©croissante
        },
        {
          model: AutoBid,
          as: 'autoBids',
          attributes: ['id', 'userId', 'maxBidAmount'],
        },
        {
          model: GTCTransaction,
          as: 'transactions',
          attributes: ['id', 'auctionId', 'type', 'userId', 'amount', 'success'],
        },
      ],
    });

    if (!auction || auction.status !== 'open') {
      return res.status(400).json({ message: 'Ench√®re non disponible ou d√©j√† ferm√©e.' });
    }

    // ‚úÖ Mettre √† jour l'√©tat de l'ench√®re
    auction.status = 'cancelled';
    auction.autoBidActive = false;  // ‚ùå D√©sactiver les AutoBids
    auction.cancellationReason = reason || 'Non sp√©cifi√©e';
    await auction.save();

    console.log(`‚úÖ Ench√®re ${auctionId} mise √† jour en annul√©e et AutoBids d√©sactiv√©s.`);

    // ‚úÖ Trouver la **derni√®re ench√®re active non rembours√©e**
    const lastBid = await Bid.findOne({
      where: {
        auctionId,
        userId: auction.highestBidUserId, // ‚úÖ Celui qui a la plus haute ench√®re
        amount: auction.currentHighestBid, // ‚úÖ Montant le plus √©lev√©
        refunded: false, // ‚ùå Pas encore rembours√©
      },
      order: [['createdAt', 'DESC']], // üî• Trier pour √™tre s√ªr de prendre la plus r√©cente
    });

    if (!lastBid) {
      console.log(`‚ùå Aucune mise active trouv√©e pour remboursement.`);
      return res.status(200).json({ message: "Aucune mise active √† rembourser." });
    }

    console.log(`üîç Derni√®re mise identifi√©e : UserID=${lastBid.userId}, Amount=${lastBid.amount}, AutoBid=${lastBid.isAutoBid}`);

    // ‚úÖ V√©rifier si cette mise a d√©j√† √©t√© rembours√©e
    const alreadyRefunded = await GTCTransaction.findOne({
      where: {
        auctionId,
        userId: lastBid.userId,
        type: 'refund',
        amount: lastBid.amount,
        success: true,
      },
    });

    if (alreadyRefunded) {
      console.log(`‚ùå Cette mise a d√©j√† √©t√© rembours√©e. Aucun remboursement √† refaire.`);
      return res.status(200).json({ message: "Mise d√©j√† rembours√©e." });
    }

    // ‚úÖ V√©rifier si l'utilisateur a un AutoBid actif
    const userAutoBid = auction.autoBids.find(autoBid => autoBid.userId === lastBid.userId);
    
    let refundAmount = lastBid.amount; // üî• Par d√©faut, on rembourse la derni√®re mise

    if (userAutoBid) {
      console.log(`üîç AutoBid d√©tect√© : UserID=${userAutoBid.userId}, MaxBid=${userAutoBid.maxBidAmount}`);

      // ‚úÖ Si l'AutoBid a atteint son maxBidAmount, rembourser tout
      if (lastBid.amount >= userAutoBid.maxBidAmount) {
        refundAmount = userAutoBid.maxBidAmount;
      }
    }

    console.log(`üí∞ Montant √† rembourser pour UserID=${lastBid.userId} : ${refundAmount} GTC`);

    // ‚úÖ Effectuer le remboursement
    const user = await User.findByPk(lastBid.userId);
    if (user) {
      user.tokenBalance += refundAmount;
      await user.save();

      lastBid.refunded = true;
      await lastBid.save();

      console.log(`‚úÖ Solde mis √† jour pour l'utilisateur ${user.id} (+${refundAmount} GTC)`);

      // ‚úÖ Enregistrer la transaction de remboursement
      await GTCTransaction.create({
        userId: user.id,
        auctionId: auction.id,
        type: 'refund',
        amount: refundAmount,
        description: `Remboursement pour l'ench√®re annul√©e.`,
        isInternal: true,
        success: true,
        status: 'completed',
      });

      console.log(`‚úÖ Transaction de remboursement cr√©√©e pour ${user.id}`);

      // ‚úÖ Notification pour l'utilisateur
      await Notification.create({
        userId: user.id,
        message: `Vous avez √©t√© rembours√© de ${refundAmount} GTC pour l'ench√®re annul√©e.`,
      });

      console.log(`üì© Notification de remboursement envoy√©e √† ${user.id}`);
    }

    // ‚úÖ Supprimer tous les AutoBids apr√®s l'annulation
    await AutoBid.destroy({ where: { auctionId } });
    console.log(`‚úÖ Tous les AutoBids pour l'ench√®re ${auctionId} ont √©t√© supprim√©s.`);

    // ‚úÖ Diffusion WebSocket
    const io = getIO();
    io.emit("auction-cancelled", { id: auction.id });

    console.log(`üö´ Ench√®re annul√©e et mise √† jour en temps r√©el : ${auctionId}`);

    res.status(200).json({
      message: "L'ench√®re a √©t√© annul√©e avec succ√®s.",
      auction,
    });

  } catch (error) {
    console.error("‚ùå Erreur lors de l'annulation de l'ench√®re :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};











// R√©cup√©rer les ench√®res ferm√©es
exports.getClosedAuctions = async (req, res) => {
  try {
    const closedAuctions = await Auction.findAll({
      where: { status: 'closed' },
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['name', 'categoryId', 'price', 'endDate', 'sellerId'],
          include: [
            {
              model: Category,
              as: 'category', // Alias d√©fini dans la relation
              attributes: ['id', 'name'], // Ajoutez la colonne `name` pour le frontend
            },
            
          ],
        },
        {
          model: User,
          as: 'highestBidder',
          attributes: ['id', 'name', 'email'],
        },
      ],
      order: [['endDate', 'DESC']],
    });

    res.status(200).json(closedAuctions);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des ench√®res ferm√©es :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

// R√©cup√©rer toutes les ench√®res pour l'administrateur
exports.getAllAuctionsAdmin = async (req, res) => {
  try {
    if (!req.user.isAdmin) {
      return res.status(403).json({ message: 'Acc√®s refus√© : r√©serv√© aux administrateurs' });
    }

    const auctions = await Auction.findAll({
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['name', 'categoryId', 'price', 'endDate', 'sellerId'],
          include: [
            {
              model: Category,
              as: 'category',
              attributes: ['id', 'name'],
              required: false,
            },
            {
              model: User, // ‚úÖ V√©rifie bien que cette ligne est pr√©sente
              as: 'seller', // ‚úÖ V√©rifie bien cet alias
              attributes: ['id', 'name', 'email'], // ‚úÖ On r√©cup√®re le vendeur
            },
          ],
        },
        {
          model: User,
          as: 'highestBidder',
          attributes: ['id', 'name', 'email'],
        },
        {
          model: Bid,
          as: 'bids',
          include: [
            {
              model: User,
              as: 'bidder',
              attributes: ['id', 'name', 'email'],
            },
          ],
          order: [['amount', 'DESC']],
          limit: 5,
        },
      ],
      order: [['endDate', 'ASC']],
    });

    // ‚úÖ V√©rification et r√©cup√©ration des donn√©es manquantes
    const transformedAuctions = await Promise.all(
      auctions.map(async (auction) => {
        let highestBidder = auction.highestBidder || null;

        // ‚úÖ V√©rifier si `highestBidUserId` existe mais que `highestBidder` est null
        if (!highestBidder && auction.highestBidUserId) {
          highestBidder = await User.findByPk(auction.highestBidUserId, {
            attributes: ['id', 'name', 'email'],
          });
        }

        return {
          id: auction.id,
          status: auction.status,
          currentHighestBid: auction.currentHighestBid || 0,
          endDate: auction.endDate,
          articleDetails: {
            name: auction.articleDetails.name,
            category: auction.articleDetails.category
              ? auction.articleDetails.category.name
              : 'Cat√©gorie non disponible',
            price: auction.articleDetails.price,
            endDate: auction.articleDetails.endDate,
            sellerId: auction.articleDetails.sellerId,
            seller: auction.articleDetails.seller // ‚úÖ Ajout du vendeur ici
          },
          highestBidder: highestBidder
            ? {
                id: highestBidder.id,
                name: highestBidder.name,
                email: highestBidder.email,
              }
            : auction.bids.length > 0
            ? {
                id: auction.bids[0].bidder.id,
                name: auction.bids[0].bidder.name,
                email: auction.bids[0].bidder.email,
                bidAmount: auction.bids[0].amount,
              }
            : null,
          totalBids: auction.bids.length,
          bids: auction.bids.map((bid) => ({
            id: bid.id,
            amount: bid.amount,
            bidder: {
              id: bid.bidder.id,
              name: bid.bidder.name,
            },
          })),
        };
      })
    );
    
    res.status(200).json(transformedAuctions);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des ench√®res administratives :', error);
    res.status(500).json({ message: 'Erreur serveur.' });
  }
};


// R√©cup√©rer les ench√®res annul√©es
exports.getCancelledAuctions = async (req, res) => {
  try {
    const sellerId = req.user.id; // ID du vendeur connect√©

    const cancelledAuctions = await Auction.findAll({
      where: { status: 'cancelled' },
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['name', 'categoryId', 'price','startprice'],
          include: [
            {
              model: Category,
              as: 'category', // Alias d√©fini dans la relation
              attributes: ['id', 'name'], // Ajoutez la colonne `name` pour le frontend
            },
          ],
          where: { sellerId }, // Filtrer par l'ID du vendeur
        },
      ],
      order: [['updatedAt', 'DESC']], // Trier par la date de mise √† jour
    });

    res.status(200).json(cancelledAuctions);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des ench√®res annul√©es pour le vendeur :', error);
    res.status(500).json({ message: 'Erreur serveur.' });
  }
};

// auctionController.js
exports.finalizeAuction = async (req, res) => {
  try {
    const articleId = parseInt(req.params.auctionId, 10);

    if (isNaN(articleId)) {
      return res.status(400).json({ message: "ID d'article invalide." });
    }

    const auction = await Auction.findOne({
      where: { articleId, status: 'open' },
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['id', 'name', 'isSold', 'sellerId'],
        },
        {
          model: Bid,
          as: 'bids',
        },
        {
          model:GTCTransaction,
          as:'transactions',
          attributes:['id','auctionId','type']
        },
      ],
    });

    if (!auction) {
      return res.status(404).json({ message: "Ench√®re non ouverte ou introuvable pour cet article." });
    }

    const article = auction.articleDetails;

    if (article.isSold) {
      return res.status(400).json({ message: "L'article est d√©j√† vendu." });
    }

    const winner = await User.findByPk(auction.highestBidUserId);
    if (!winner) {
      return res.status(404).json({ message: "Aucun gagnant trouv√© pour cette ench√®re." });
    }

    // Gestion des fonds r√©serv√©s pour l'offre gagnante
    const winningBid = auction.bids.find(
      (bid) => bid.userId === winner.id && bid.amount === auction.currentHighestBid && bid.reserved
    );

    if (winningBid) {
      winningBid.reserved = false; // Lib√©rer les fonds r√©serv√©s
      await winningBid.save();
    } else {
      if (winner.tokenBalance < auction.currentHighestBid) {
        return res.status(400).json({ message: "Le gagnant n'a pas suffisamment de jetons." });
      }

      winner.tokenBalance -= auction.currentHighestBid;
      await winner.save();
    }

    // Calcul des montants
    const commissionRate = 0.1;
    const commission = auction.currentHighestBid * commissionRate;
    const reward = auction.currentHighestBid - commission;

    // Transactions pour le gagnant
    await GTCTransaction.create({
      userId: winner.id,
      auctionId: auction.id,
      type: 'spend',
      amount: auction.currentHighestBid,
      description: `D√©duction pour l'achat de l'article "${article.name}"`,
      operator: "Platform",
      phoneNumber: winner.phoneNumber || "0000000000",
      isInternal: false,
      success: true,
    });

    // Ajouter la r√©compense au vendeur
    const seller = await User.findByPk(article.sellerId);
    if (seller) {
      seller.tokenBalance += reward;
      await seller.save();

      // Transaction pour le vendeur
      await GTCTransaction.create({
        userId: seller.id,
        type: 'reward',
        amount: reward,
        description: `Revenu de la vente de l'article "${article.name}" apr√®s d√©duction de la commission.`,
        isInternal: true,
        success: true,
      });
    }

    // Ajouter la commission √† la plateforme
    const platform = await Platform.findOne();
    if (platform) {
      platform.balance += commission;
      await platform.save();

      await GTCTransaction.create({
        userId: null,
        type: 'commission',
        amount: commission,
        description: `Commission de la plateforme pour l'article "${article.name}".`,
        isInternal: true,
        success: true,
      });
    }

    // Mettre √† jour l'article et l'ench√®re
    article.isSold = true;
    article.soldTo = winner.id;
    await article.save();

    auction.status = 'closed';
    auction.finalizedAt = new Date();
    await auction.save();

    // Notifications
    await Notification.create({
      userId: winner.id,
      message: `F√©licitations ! Vous avez remport√© l'ench√®re pour "${article.name}".`,
    });

    if (seller) {
      await Notification.create({
        userId: seller.id,
        message: `Votre article "${article.name}" a √©t√© vendu pour ${auction.currentHighestBid} GTC. Vous avez re√ßu ${reward} GTC apr√®s d√©duction de la commission.`,
      });
    }

    res.status(200).json({ message: "Ench√®re finalis√©e avec succ√®s.", auction });
  } catch (error) {
    console.error("Erreur lors de la finalisation de l'ench√®re :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

exports.closeExpiredAuctions = async () => {
  try {
    const now = new Date();

    // R√©cup√©rer toutes les ench√®res expir√©es
    const expiredAuctions = await Auction.findAll({
      where: {
        status: 'open',
        endDate: { [Op.lt]: now },
      },
      include: [
        { model: Article, as: 'articleDetails', include: [{ model: User, as: 'seller' }] },
        { model: Bid, as: 'bids' },
      ],
    });

    console.log(`üîé Ench√®res expir√©es d√©tect√©es : ${expiredAuctions.length}`);

    for (const auction of expiredAuctions) {
      auction.status = 'closed';
      auction.finalizedAt = now;
      await auction.save();

      const article = auction.articleDetails;
      const seller = article.seller;
      let winner = null;

      if (!seller) {
        console.error(`‚ùå Vendeur non trouv√© pour l'ench√®re ${auction.id}`);
        continue;
      }

      if (auction.highestBidUserId) {
        winner = await User.findByPk(auction.highestBidUserId);
      }

      console.log(`üõë Ench√®re ${auction.id} ferm√©e automatiquement.`);

      await Notification.create({
        userId: seller.id,
        message: `Votre ench√®re pour l'article "${article.name}" a √©t√© arr√™t√©e automatiquement.`,
      });

      // üî• Gestion du gagnant et du paiement du vendeur
      if (winner) {
        console.log(`üéâ Gagnant d√©tect√© pour l'ench√®re ${auction.id}: ID ${winner.id}`);

        // Marquer l'article comme vendu
        article.isSold = true;
        article.soldTo = winner.id;
        article.price = auction.currentHighestBid;
        await article.save();

        const commissionRate = 0.1;
        const commission = auction.currentHighestBid * commissionRate;
        const reward = auction.currentHighestBid - commission;

        // ‚úÖ V√©rifier que le gagnant a assez de tokens
        if (winner.tokenBalance < auction.currentHighestBid) {
          console.error(`‚ùå Solde insuffisant pour payer l'ench√®re ${auction.id}`);
          continue;
        }

        await winner.save();

        // ‚úÖ Bloquer les fonds en escrow pour l'acheteur
        await GTCTransaction.create({
          userId: winner.id,
          auctionId: auction.id,
          type: "escrow",
          amount: reward,
          description: `Fonds bloqu√©s pour l'achat de "${article.name}"`,
          status: "pending",
          isInternal: true,
          success: true,
        });

        // ‚úÖ Bloquer les fonds en escrow pour le vendeur
        await GTCTransaction.create({
          userId: seller.id,
          auctionId: auction.id,
          type: "escrow",
          amount: reward,
          description: `Fonds bloqu√©s pour la vente de "${article.name}"`,
          status: "pending",
          isInternal: true,
          success: true,
        });

        // ‚úÖ Enregistrer la transaction de commission
        await GTCTransaction.create({
          userId: null,
          auctionId: auction.id,
          type: "commission",
          amount: commission,
          description: `Commission de la vente de "${article.name}".`,
          status: "completed",
          isInternal: true,
          success: true,
        });

        // ‚úÖ Cr√©er une entr√©e de livraison avec un code unique
        const delivery = await Delivery.create({
          auctionId: auction.id,
          buyerId: winner.id,
          sellerId: seller.id,
          status: "pending",
          address: winner.address,
          codeUnique: Math.random().toString(36).substr(2, 8),
        });

        // ‚úÖ Notifier l'acheteur avec son code unique
        await Notification.create({
          userId: winner.id,
          message: `Votre code unique pour la r√©ception de "${article.name}" est : ${delivery.codeUnique}. Gardez-le pr√©cieusement.`,
        });

        console.log(`[INFO] üîí ${reward} GTC bloqu√©s en Escrow Wallet pour ${winner.name}.`);
      }

      // üî• Notifier en temps r√©el via WebSocket
      const io = getIO();
      io.emit("auction-ended", {
        id: auction.id,
        winnerId: winner ? winner.id : null,
        finalPrice: auction.currentHighestBid,
        message: winner
          ? `L'ench√®re ${auction.id} s'est termin√©e, gagn√©e par ${winner.id}`
          : `L'ench√®re ${auction.id} s'est termin√©e sans gagnant.`,
      });

      console.log(`‚úÖ √âv√©nement "auction-ended" envoy√©.`);
    }

    console.log(`‚úÖ ${expiredAuctions.length} ench√®res expir√©es ont √©t√© ferm√©es automatiquement.`);
  } catch (error) {
    console.error("‚ùå Erreur lors de la cl√¥ture des ench√®res expir√©es :", error);
  }
};


exports.stopInactiveAuctions = async () => {
  try {
    const now = new Date();
    const inactiveThreshold = new Date(now - 2 * 60 * 1000); // 30 minutes d'inactivit√©

    console.log(`‚è≥ V√©rification des ench√®res inactives √† ${now.toISOString()}`);

    // üîç Trouver toutes les ench√®res ouvertes o√π `lastBidTime` ET `lastAutoBidTime` sont inactifs
    const inactiveAuctions = await Auction.findAll({
      where: {
        status: "open",
        currentHighestBid: { [Op.ne]: null }, // ‚úÖ Il faut au moins une mise
        highestBidUserId: { [Op.ne]: null }, // ‚úÖ Un ench√©risseur doit exister
        [Op.and]: [
          { 
            [Op.or]: [
              { lastBidTime: { [Op.lt]: inactiveThreshold } }, // ‚úÖ Derni√®re mise manuelle trop ancienne
              { lastBidTime: null } // ‚úÖ Aucune mise manuelle
            ] 
          },
          { 
            [Op.or]: [
              { lastAutoBidTime: { [Op.lt]: inactiveThreshold } }, // ‚úÖ Dernier AutoBid trop ancien
              { lastAutoBidTime: null } // ‚úÖ Aucun AutoBid
            ] 
          }
        ]
      },
      attributes: [
        "id",
        "status",
        "currentHighestBid",
        "highestBidUserId",
        "lastBidTime",
        "lastAutoBidTime", // üî• Ajout explicite de lastAutoBidTime
        "autoBidActive"
      ],
      include: [
        { model: Article, as: "articleDetails", include: [{ model: User, as: "seller" }] },
        { model: AutoBid, as: "autoBids", required: false, attributes: ["userId", "maxBidAmount"] },
        { model: Bid, as: "bids", required: false, order: [["createdAt", "DESC"]] }
      ]
    });
    
    
    
    console.log(`üîé Ench√®res d√©tect√©es comme inactives : ${inactiveAuctions.length}`);

    for (const auction of inactiveAuctions) {
      console.log(`üõë Arr√™t de l'ench√®re ${auction.id} - lastBidTime: ${auction.lastBidTime}, lastAutoBidTime: ${auction.lastAutoBidTime}`);

      const highestBidUserId = auction.highestBidUserId;

      // üî• Supprimer tous les AutoBids li√©s √† cette ench√®re
      await AutoBid.destroy({ where: { auctionId: auction.id } });

      // ‚úÖ D√©sactiver `autoBidActive`
      auction.autoBidActive = false;
      auction.status = "closed";
      auction.finalizedAt = now;
      await auction.save();

      console.log(`üõë Ench√®re ${auction.id} cl√¥tur√©e apr√®s 30 minutes d'inactivit√©.`);

      if (highestBidUserId) {
        await Notification.create({
          userId: highestBidUserId,
          message: `L'ench√®re sur "${auction.articleDetails.name}" a √©t√© arr√™t√©e automatiquement apr√®s 30 minutes d'inactivit√©.`,
        });
      }

      const article = auction.articleDetails;
      let winner = null;

      if (auction.highestBidUserId) {
        winner = await User.findByPk(auction.highestBidUserId);
      }

      // üî• Envoyer un √©v√©nement WebSocket pour notifier en temps r√©el
      const io = getIO();
      io.emit("auction-ended", {
        id: auction.id,
        winnerId: highestBidUserId || null,
        finalPrice: auction.currentHighestBid,
        message: highestBidUserId
          ? `L'ench√®re ${auction.id} s'est termin√©e, gagn√©e par ${highestBidUserId}.`
          : `L'ench√®re ${auction.id} s'est termin√©e sans gagnant.`,
      });

      console.log(`‚úÖ √âv√©nement "auction-ended" envoy√© avec succ√®s.`);

       // üî• GESTION DES TRANSACTIONS SI IL Y A UN GAGNANT
       if (winner) {
        const seller = article.seller;

        if (!seller) {
          console.error(`[ERROR] ‚ùå Vendeur non trouv√© pour l'ench√®re ${auction.id}`);
          continue;
        }

        console.log(`[INFO] üéâ Gagnant d√©tect√© : ${winner.id}`);

        const commissionRate = 0.1;
        const commission = auction.currentHighestBid * commissionRate;
        const reward = auction.currentHighestBid - commission;

        // ‚úÖ Bloquer les fonds en escrow pour l'acheteur
        await GTCTransaction.create({
          userId: winner.id,
          auctionId: auction.id,
          type: "escrow",
          amount: auction.currentHighestBid,
          description: `Fonds bloqu√©s pour l'achat de "${article.name}"`,
          status: "pending",
          isInternal: true,
          success: true,
        });

        // ‚úÖ Bloquer les fonds en escrow pour le vendeur
        await GTCTransaction.create({
          userId: seller.id,
          auctionId: auction.id,
          type: "escrow",
          amount: reward,
          description: `Fonds bloqu√©s pour la vente de "${article.name}"`,
          status: "pending",
          isInternal: true,
          success: true,
        });

        // ‚úÖ Enregistrer la transaction de commission
        await GTCTransaction.create({
          userId: null,
          auctionId: auction.id,
          type: "commission",
          amount: commission,
          description: `Commission de la vente de "${article.name}".`,
          status: "completed",
          isInternal: true,
          success: true,
        });

        // ‚úÖ Cr√©er une entr√©e de livraison avec un code unique
        const delivery = await Delivery.create({
          auctionId: auction.id,
          buyerId: winner.id,
          sellerId: seller.id,
          status: "pending",
          address: winner.address,
          codeUnique: Math.random().toString(36).substr(2, 8),
        });

        // ‚úÖ Notifier l'acheteur avec son code unique
        await Notification.create({
          userId: winner.id,
          message: `Votre code unique pour la r√©ception de "${article.name}" est : ${delivery.codeUnique}. Gardez-le pr√©cieusement.`,
        });

        console.log(`[INFO] üîí ${reward} GTC bloqu√©s en Escrow Wallet pour ${winner.name}.`);
      }
    }

    console.log(`‚úÖ Fin du processus d'arr√™t automatique.`);
  } catch (error) {
    console.error("‚ùå Erreur lors de l'arr√™t des ench√®res inactives :", error);
  }
};




































// R√©cup√©rer les ench√®res gagn√©es par l'utilisateur
exports.getWonAuctions = async (req, res) => {
  try {
    const userId = req.user.id;

    const wonAuctions = await Auction.findAll({
      where: { status: 'closed', highestBidUserId: userId },
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['name', 'price', 'endDate', 'imgUrl'], // Ajoute 'imgUrl' pour la photo de l'article
          include: [
            {
              model: User, // Assurez-vous que c'est le bon mod√®le pour le vendeur
              as: 'seller', // Nom de l'association
              attributes: ['name', 'lastName', 'email', 'profilePicture', 'phone', 'address', 'cin'], // Inclure tous les d√©tails n√©cessaires
            },
          ],
        },
      ],
      order: [['finalizedAt', 'DESC']],
    });

    // Transformez les donn√©es pour simplifier la structure
    const result = wonAuctions.map((auction) => ({
      id: auction.id,
      currentHighestBid: auction.currentHighestBid,
      endDate: auction.endDate || auction.finalizedAt, // Utilisez endDate si disponible
      articleName: auction.articleDetails?.name || 'Nom non disponible',
      imageUrl: auction.articleDetails?.imgUrl || '', // URL de l'image
      seller: {
        name: auction.articleDetails?.seller?.name || 'Nom non disponible',
        lastName: auction.articleDetails?.seller?.lastName || 'Nom non disponible',
        email: auction.articleDetails?.seller?.email || 'Email non disponible',
        profilePicture: auction.articleDetails?.seller?.profilePicture || '', // Photo de profil
        phone: auction.articleDetails?.seller?.phone || 'T√©l√©phone non disponible',
        address: auction.articleDetails?.seller?.address || 'Adresse non disponible',
        cin: auction.articleDetails?.seller?.cin || 'CIN non disponible',
      },
    }));

    res.status(200).json(result);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des ench√®res gagn√©es :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

exports.getSellerAuctions = async (req, res) => {
  try {
    const sellerId = req.user.id;

    if (!sellerId) {
      return res.status(400).json({ message: "ID du vendeur non d√©fini" });
    }

    const auctions = await Auction.findAll({
      include: [
        {
          model: Article,
          as: 'articleDetails',
          where: { sellerId },
          attributes: ['id', 'name', 'categoryId', 'startPrice'],
          include: [
            {
              model: Category,
              as: 'category',
              attributes: ['id', 'name'],
            },
          ],
        },
        {
          model: Bid,
          as: 'bids',
          include: [
            {
              model: User,
              as: 'bidder',
              attributes: ['id', 'name', 'email'],
            },
          ],
        },
        {
          model: GTCTransaction,
          as: 'transactions',
          required: false, 
          attributes: ['id', 'type', 'amount', 'description', 'status', 'createdAt', 'userId'],
          where: {
            [Op.or]: [
                { type: "reward" }, // ‚úÖ Afficher les paiements re√ßus
                { type: "commission" }, // ‚úÖ Afficher les frais de commission
                { type: "escrow", status: { [Op.in]: ["pending", "completed"] } }, // ‚úÖ Inclure escrow m√™me apr√®s compl√©tion
            ],
           },
        
        },
        {
          model: User,
          as: 'highestBidder',
          attributes: ['id', 'name', 'email'],
        },
      ],
      order: [['createdAt', 'DESC']],
    });

    // ‚úÖ V√©rifiez si la transaction appartient bien au vendeur en m√©moire
    const transformedAuctions = auctions.map((auction) => {
      const relatedTransactions = auction.transactions.filter(
        (transaction) => transaction.userId === sellerId
      );

      return {
        id: auction.id,
        articleName: auction.articleDetails.name,
        articleCategory: auction.articleDetails.category?.name || 'Non sp√©cifi√©e',
        startPrice: auction.articleDetails.startPrice,
        currentHighestBid: auction.currentHighestBid || 0,
        status: auction.status,
        reason: auction.cancellationReason || 'N/A',
        winner: auction.highestBidder
          ? {
              id: auction.highestBidder.id,
              name: auction.highestBidder.name,
              email: auction.highestBidder.email,
            }
          : null,
        totalBids: auction.bids.length,
        endDate: auction.endDate,
        duration: auction.endDate
          ? `${Math.floor((new Date(auction.endDate) - new Date(auction.createdAt)) / (1000 * 60 * 60))} heures`
          : `${Math.floor((new Date() - new Date(auction.createdAt)) / (1000 * 60 * 60))} heures`,
        transactions: relatedTransactions.map((transaction) => ({
          id: transaction.id,
          type: transaction.type,
          amount: transaction.amount,
          description: transaction.description,
          status: transaction.status,
          date: transaction.createdAt,
        })) || [],
      };
    });

    res.status(200).json({
      success: true,
      data: transformedAuctions,
    });

  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des ench√®res du vendeur :", error);
    res.status(500).json({
      message: "Erreur serveur.",
      errorDetails: error.message,
    });
  } 
};


// R√©cup√©rer les ench√®res annul√©es pour un utilisateur (acheteur)
exports.getCancelledAuctionsForBuyer = async (req, res) => {
  try {
    const buyerId = req.user.id; // ID de l'utilisateur connect√©

    const cancelledAuctions = await Auction.findAll({
      where: { status: 'cancelled' },
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['name', 'categoryId', 'startPrice', 'price'],
          include: [
            {
              model: Category,
              as: 'category', // Alias d√©fini dans la relation
              attributes: ['id', 'name'], // Inclure la cat√©gorie
            },
          ],
        },
        {
          model: Bid, // Inclure les mises faites par l'utilisateur
          as: 'bids',
          where: { userId: buyerId }, // Filtrer uniquement les ench√®res o√π l'utilisateur a particip√©
          required: true, // Ne retourner que les ench√®res o√π il y a des mises
          attributes: ['id','amount', 'createdAt'], // Inclure les d√©tails des mises
        },
      ],
      order: [['updatedAt', 'DESC']], // Trier par date de mise √† jour
    });

    if (!cancelledAuctions.length) {
      return res.status(404).json({ message: 'Aucune ench√®re annul√©e trouv√©e.' });
    }

    // Structurer la r√©ponse
    // Transformer les donn√©es pour inclure la derni√®re mise de l'utilisateur
    const transformedAuctions = cancelledAuctions.map((auction) => {
      const userBids = auction.bids || [];
      const lastBid = userBids.length > 0
        ? Math.max(...userBids.map((bid) => bid.amount)) // Derni√®re mise de l'utilisateur
        : null;

      return {
        id: auction.id,
        articleName: auction.articleDetails?.name || 'Non sp√©cifi√©',
        startPrice: auction.articleDetails?.startPrice || 0,
        finalPrice: auction.articleDetails?.price || null,
        cancelReason: auction.cancellationReason || 'Non sp√©cifi√©e',
        cancelDate: auction.updatedAt,
        lastBid, // Ajout de la derni√®re mise de l'utilisateur
      };
    });

    res.status(200).json(transformedAuctions);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des ench√®res annul√©es pour l\'acheteur :', error);
    res.status(500).json({ message: 'Erreur serveur.' });
  }
};

//historique des ench√®res admin
exports.getAuctionHistory = async (req, res) => {
  try {
    const { status, startDate, endDate, articleName } = req.query;

    const auctionHistory = await Auction.findAll({
      where: {
        ...(status && { status }),
        ...(startDate && { finalizedAt: { [Op.gte]: new Date(startDate) } }),
        ...(endDate && { finalizedAt: { [Op.lte]: new Date(endDate) } }),
  
      },
      order: [['finalizedAt', 'DESC']],
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['id', 'name', 'shortDesc', 'imgUrl', 'categoryId', 'fullDesc'],
          include: [
            {
              model: Category,
              as: 'category', // Alias d√©fini dans la relation
              attributes: ['id', 'name'], // Ajoutez la colonne `name` pour le frontend
            },
          ],
          
          where: articleName
          ? {
              name: {
                [Op.like]: `%${articleName}%`,
              },
            }
          : undefined,
          include: [
            {
              model: User,
              as: 'seller', // Inclure le vendeur via l'article
              attributes: ['id', 'name'], // Informations sur le vendeur
            }
          ],
        },
        {
          model: User,
          as: 'highestBidder',
          attributes: ['id', 'name', 'email'],
        },
        {
          model: Bid,
          as: 'bids',
          attributes: ['id', 'amount', 'userId', 'bidTime'],
          include: [
            {
              model: User,
              as: 'bidder',
              attributes: ['id', 'name'],
            },
          ],
        },
      ],
    });

    const detailedHistory = auctionHistory.map((auction) => {
      const totalBids = auction.bids.length;
      const totalParticipants = [...new Set(auction.bids.map((bid) => bid.userId))].length;
      const totalAmount = auction.bids.reduce((sum, bid) => sum + bid.amount, 0);
      const averageBid = totalBids ? (totalAmount / totalBids).toFixed(2) : 0;

      return {
        auctionId: auction.id,
        status: auction.status,
        article: auction.articleDetails,
        finalPrice: auction.currentHighestBid,
        winner: auction.highestBidder || null,
        totalBids,
        totalParticipants,
        totalAmount,
        averageBid,
        auctionStartDate: auction.createdAt,
        auctionEndDate: auction.finalizedAt,
        duration: auction.finalizedAt
          ? Math.round((auction.finalizedAt - auction.createdAt) / 1000 / 60) + ' minutes'
          : null,
        cancellationReason: auction.cancellationReason || 'N/A', // Raison d'annulation
        seller: auction.articleDetails.seller || null, // Informations sur le vendeur
      };
    });

    // R√©ponse avec les donn√©es enrichies
    res.status(200).json({
      success: true,
      message: 'Historique des ench√®res r√©cup√©r√© avec succ√®s.',
      data: detailedHistory,
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'historique :', error);
    res.status(500).json({ success: false, message: 'Erreur serveur.' });
  }
};

// R√©cup√©rer les statistiques des ench√®res
exports.getAuctionStatistics = async (req, res) => {
  try {
    // R√©cup√©rer toutes les ench√®res finalis√©es
    const finalizedAuctions = await Auction.findAll({
      where: {
        finalizedAt: { [Op.ne]: null }, // R√©cup√©rer uniquement celles qui sont finalis√©es
      },
    });

    // Calcul des statistiques
    const dailyStats = {};
    const monthlyStats = {};
    const annualStats = {};

    finalizedAuctions.forEach((auction) => {
      const date = new Date(auction.finalizedAt);
      const year = date.getFullYear();
      const month = date.toLocaleString('default', { month: 'long' });
      const day = date.toISOString().split('T')[0]; // Format YYYY-MM-DD

      // Statistiques journali√®res
      dailyStats[day] = (dailyStats[day] || 0) + auction.currentHighestBid;

      // Statistiques mensuelles
      monthlyStats[`${month} ${year}`] = (monthlyStats[`${month} ${year}`] || 0) + auction.currentHighestBid;

      // Statistiques annuelles
      annualStats[year] = (annualStats[year] || 0) + auction.currentHighestBid;
    });

    // R√©ponse avec les statistiques
    res.status(200).json({
      success: true,
      message: 'Statistiques des ench√®res r√©cup√©r√©es avec succ√®s.',
      daily: dailyStats,
      monthly: monthlyStats,
      annual: annualStats,
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des statistiques des ench√®res :', error);
    res.status(500).json({ success: false, message: 'Erreur serveur.' });
  }
};


//statistique des ench√®res c√¥t√©s vendeurs
exports.getSellerAuctionStatistics = async (req, res) => {
  try {
    const sellerId = req.user.role === 'seller' ? req.user.id : req.query.sellerId; // ID du vendeur connect√© ou fourni pour admin

    if (!sellerId) {
      return res.status(400).json({ message: "L'ID du vendeur est requis." });
    }

    // Filtrer par p√©riode
    const { period } = req.query; // Ex : daily, monthly, yearly
    let dateFilter = {};
    const now = new Date();
    if (period === 'daily') {
      dateFilter = { createdAt: { [Op.gte]: new Date(now.setHours(0, 0, 0, 0)) } };
    } else if (period === 'monthly') {
      dateFilter = { createdAt: { [Op.gte]: new Date(now.getFullYear(), now.getMonth(), 1) } };
    } else if (period === 'yearly') {
      dateFilter = { createdAt: { [Op.gte]: new Date(now.getFullYear(), 0, 1) } };
    }

    // D√©finir les inclusions pour la relation entre Auction et Article
    const articleInclude = {
      model: Article,
      as: 'articleDetails',
      where: { sellerId }, // Filtrer par l'ID du vendeur
    };

    // Calculer les statistiques
    const created = await Auction.count({
      include: [articleInclude],
      where: { ...dateFilter }, // Inclure le filtre de date
    });

    const cancelled = await Auction.count({
      include: [articleInclude],
      where: {
        ...dateFilter,
        status: 'cancelled',
      },
    });

    const ongoing = await Auction.count({
      include: [articleInclude],
      where: {
        ...dateFilter,
        status: 'open', // Assurez-vous que ce statut correspond √† votre base
      },
    });

    const stopped = await Auction.count({
      include: [articleInclude],
      where: {
        ...dateFilter,
        status: 'closed',
      },
    });

    // Envoyer les r√©sultats
    res.status(200).json({
      success: true,
      data: {
        created,
        cancelled,
        ongoing,
        stopped,
      },
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des statistiques :', error);
    res.status(500).json({ message: 'Erreur serveur.' });
  }
};



//statistique des ench√®res c√¥t√©s acheteurs
exports.getBuyerAuctionStatistics = async (req, res) => {
  try {
    const buyerId = req.user.id;

    if (!buyerId) {
      return res.status(400).json({ message: 'ID de l\'acheteur non d√©fini.' });
    }

    const finalizedAuctions = await Auction.findAll({
      where: {
        finalizedAt: { [Op.ne]: null },
        highestBidderId: buyerId, // Filtre pour l'acheteur
      },
    });

    const dailyStats = {};
    const monthlyStats = {};
    const annualStats = {};

    finalizedAuctions.forEach((auction) => {
      const date = new Date(auction.finalizedAt);
      const year = date.getFullYear();
      const month = date.toLocaleString('default', { month: 'long' });
      const day = date.toISOString().split('T')[0];

      dailyStats[day] = (dailyStats[day] || 0) + auction.currentHighestBid;
      monthlyStats[`${month} ${year}`] = (monthlyStats[`${month} ${year}`] || 0) + auction.currentHighestBid;
      annualStats[year] = (annualStats[year] || 0) + auction.currentHighestBid;
    });

    res.status(200).json({
      success: true,
      message: 'Statistiques pour l\'acheteur r√©cup√©r√©es avec succ√®s.',
      daily: dailyStats,
      monthly: monthlyStats,
      annual: annualStats,
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des statistiques de l\'acheteur :', error);
    res.status(500).json({ success: false, message: 'Erreur serveur.' });
  }
};

//r√©cup√©ration des ench√®res arr√™t√©es auto
exports.getStoppedAuctions = async (req, res) => {
  try {
    const { autoStopped } = req.query; // Param√®tre pour diff√©rencier les ench√®res stopp√©es automatiquement

    const whereClause = {
      status: 'closed', // Seules les ench√®res ferm√©es
    };

    // Si "autoStopped" est fourni, filtrez uniquement les ench√®res stopp√©es automatiquement
    if (autoStopped) {
      whereClause.finalizedAt = { [Op.ne]: null }; // Indique que l'ench√®re a √©t√© finalis√©e (date d√©finie)
      whereClause.lastBidTime = {
        [Op.lt]: new Date(new Date() - 30 * 60 * 1000), // Par exemple : inactivit√© de plus de 30 minutes
      };
    }

    // R√©cup√©rer les ench√®res stopp√©es
    const stoppedAuctions = await Auction.findAll({
      where: whereClause,
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['id', 'name', 'categoryId', 'isSold', 'sellerId'],
          include: [
            {
              model: Category,
              as: 'category', // Alias d√©fini dans la relation
              attributes: ['id', 'name'], // Ajoutez la colonne `name` pour le frontend
            },
          ],
          include: [
            {
              model: User,
              as: 'seller',
              attributes: ['id', 'name', 'email', 'tokenBalance'],
            },
          ],
        },
        {
          model: Bid,
          as: 'bids',
          attributes: ['id', 'amount', 'userId', 'bidTime', 'reserved'],
          include: [
            {
              model: User,
              as: 'bidder',
              attributes: ['id', 'name', 'email'],
            },
          ],
        },
        {
          model: User,
          as: 'highestBidder',
          attributes: ['id', 'name', 'email'],
        },
      ],
      order: [['finalizedAt', 'DESC']], // Tri par date de finalisation
    });

    if (!stoppedAuctions.length) {
      return res.status(404).json({ message: 'Aucune ench√®re stopp√©e trouv√©e.' });
    }

    // Formatage des donn√©es
    const formattedAuctions = stoppedAuctions.map((auction) => ({
      auctionId: auction.id,
      status: auction.status,
      finalizedAt: auction.finalizedAt,
      currentHighestBid: auction.currentHighestBid,
      reason: auction.lastBidTime ? 'Inactivit√©' : 'Arr√™t manuel',
      lastBidTime: auction.lastBidTime,
      article: auction.articleDetails
        ? {
            id: auction.articleDetails.id,
            name: auction.articleDetails.name,
            category: auction.articleDetails.category,
            isSold: auction.articleDetails.isSold,
            seller: auction.articleDetails.seller || null,
          }
        : null,
      highestBidder: auction.highestBidder || null,
      bids: auction.bids.map((bid) => ({
        bidId: bid.id,
        amount: bid.amount,
        bidder: bid.bidder || null,
        bidTime: bid.bidTime,
        reserved: bid.reserved,
      })),
    }));

    res.status(200).json({
      success: true,
      message: 'Ench√®res stopp√©es r√©cup√©r√©es avec succ√®s.',
      data: formattedAuctions,
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des ench√®res stopp√©es :', error);
    res.status(500).json({ message: 'Erreur serveur.', errorDetails: error.message });
  }
};

// auctionController.js
exports.getSellerStoppedAuctions = async (req, res) => {
  try {
    const sellerId = req.user.id; // ID du vendeur connect√©

    if (!sellerId) {
      return res.status(400).json({ message: "ID du vendeur non d√©fini." });
    }

    const stoppedAuctions = await Auction.findAll({
      where: { status: 'closed' }, // R√©cup√©rer les ench√®res stopp√©es
      include: [
        {
          model: Article,
          as: 'articleDetails',
          where: { sellerId }, // Filtrer les articles appartenant au vendeur
          attributes: ['id', 'name', 'categoryId', 'startPrice'],
          include: [
            {
              model: Category,
              as: 'category', // Alias d√©fini dans la relation
              attributes: ['id', 'name'], // Ajoutez la colonne `name` pour le frontend
            },
          ],
        },
        {
          model: Bid,
          as: 'bids',
          attributes: ['id', 'amount', 'userId', 'bidTime'],
        },
      ],
    });

    // R√©cup√©rer les transactions li√©es au vendeur
    const sellerTransactions = await GTCTransaction.findAll({
      where: { userId: sellerId }, // Transactions li√©es au vendeur
      attributes: ['id', 'type', 'amount', 'description', 'createdAt', 'success'],
    });

    // Transformez les ench√®res en ajoutant les transactions correspondantes
    const transformedAuctions = stoppedAuctions.map((auction) => ({
      auctionId: auction.id,
      article: auction.articleDetails,
      category:auction.articleDetails?.category,
      currentHighestBid: auction.currentHighestBid || 0,
      reason: auction.cancellationReason || 'Inactivit√©',
      finalizedAt: auction.finalizedAt,
      totalBids: auction.bids.length,
      participants: new Set(auction.bids.map((bid) => bid.userId)).size,
      transactions: sellerTransactions.filter(
        (transaction) =>
          transaction.description &&
          transaction.description.includes(auction.articleDetails.name)
      ), // Filtrer les transactions li√©es √† cette ench√®re
    }));

    res.status(200).json({
      success: true,
      data: transformedAuctions,
    });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des ench√®res stopp√©es du vendeur :", error);
    res.status(500).json({ message: "Erreur serveur." });
  }
};

//ench√®res perdues acheteurs
exports.getExpiredAuctionsForBuyer = async (req, res) => {
  try {
    const userId = req.user.id; // ID de l'utilisateur connect√©

    const lostAuctions = await Auction.findAll({
      where: {
        status: 'closed', // L'ench√®re est termin√©e
        [Op.or]: [
          { highestBidUserId: { [Op.ne]: userId } }, // Un autre utilisateur a gagn√©
          { highestBidUserId: null }, // Aucun gagnant d√©fini
        ],
      },
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['name', 'price','startPrice'], // Nom et prix de l'article
        },
        {
          model: Bid,
          as: 'bids',
          attributes: ['amount'], // Derni√®re mise de l'utilisateur
          where: { userId }, // Filtrer uniquement les offres de l'utilisateur
          required: true, // L'utilisateur doit avoir particip√©
        },
      ],
      order: [['finalizedAt', 'DESC']], // Trier par la date de cl√¥ture
    });

    res.status(200).json(lostAuctions);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des ench√®res perdues :', error);
    res.status(500).json({ message: 'Erreur serveur.' });
  }
};


exports.getBuyerAuctionHistory = async (req, res) => {
  try {
    const buyerId = req.user.id;

    if (!buyerId) {
      return res.status(400).json({ message: "ID de l'acheteur non d√©fini." });
    }

    const auctions = await Auction.findAll({
      include: [
        {
          model: Article,
          as: 'articleDetails',
          attributes: ['id', 'name', 'categoryId', 'startPrice'],
          include: [
            { model: Category, as: 'category', attributes: ['id', 'name'] },
            { model: User, as: 'seller', attributes: ['id', 'name', 'email'] },
          ],
        },
        {
          model: Bid,
          as: 'bids',
          where: { userId: buyerId },
          required: true,
          attributes: ['id', 'amount', 'createdAt', 'refunded'],
        },
        {
          model: GTCTransaction,
          as: 'transactions',
          attributes: ['id', 'type', 'amount', 'description', 'createdAt', 'auctionId', 'userId'],
        },
      ],
      where: { status: { [Op.or]: ['cancelled', 'closed'] } },
      order: [['finalizedAt', 'DESC']],
    });

    const transformedAuctions = auctions.map((auction) => {
      const isWon = auction.highestBidUserId === buyerId;
      const isCancelled = auction.status === 'cancelled';
      const isLost =
        auction.status === 'closed' &&
        (auction.highestBidUserId !== buyerId || auction.highestBidUserId === null );

      console.log(`Ench√®re ${auction.id} : isWon=${isWon}, isCancelled=${isCancelled}, isLost=${isLost}`);

      const relevantTransactions = auction.transactions.filter((transaction) => {
        if (isWon && transaction.type === 'spend') {
          return true;
        } else if ((isLost || isCancelled) && transaction.type === 'refund') {
          return transaction.userId === buyerId && transaction.auctionId === auction.id;
        }
        return false;
      });

      return {
        id: auction.id,
        articleName: auction.articleDetails.name,
        articleCategory: auction.articleDetails.category?.name || 'Non sp√©cifi√©e',
        seller: auction.articleDetails.seller
          ? {
              id: auction.articleDetails.seller.id,
              name: auction.articleDetails.seller.name,
              email: auction.articleDetails.seller.email,
            }
          : null,
        startPrice: auction.articleDetails.startPrice,
        currentHighestBid: auction.currentHighestBid || 0,
        status: auction.status,
        reason: auction.cancellationReason || 'N/A',
        bids: auction.bids.map((bid) => ({
          id: bid.id,
          amount: bid.amount,
          refunded: bid.refunded,
          date: bid.createdAt,
        })),
        transactions: relevantTransactions.map((transaction) => ({
          id: transaction.id,
          type: transaction.type,
          amount: transaction.amount,
          description: transaction.description,
          date: transaction.createdAt,
        })),
      };
    });

    res.status(200).json({ success: true, data: transformedAuctions });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration de l'historique des ench√®res :", error);
    res.status(500).json({ message: "Erreur serveur.", errorDetails: error.message });
  }
};


















































